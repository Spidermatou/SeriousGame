@startuml

!theme reddress-darkgreen

package Godot {
    class Node
    class Node2D extends Node
}

package Observers{
    interface IBuildingObserver {
        + UpdateModelData(model : IBuildingModel)
    }

}

package OurProject {

package Models {
    class TerritoryModel {
        /' Rates '/
        - economy : int
        - ecology : int
        - sociability : int
        + GetEconomyRate() : int
        + GetEcologyRate() : int
        + GetSociabilityRate() : int
    }

    abstract BuildingModel implements IBuildingModel {
        - buildingName : string
        - impacts : int[3]
        + GetBuildingName() : string
        + GetImpacts() : int[3]
    }

    interface IBuildingModel{
        + GetBuildingName() : string
        + GetImpacts() : int[3]
    }

    /' Some examples '/
    class BarModel
    class CarFactoryModel
    class PowerPlantModel
    class OatFieldModel
    class HaulageFirmModel

    BuildingModel <|-- BarModel
    BuildingModel <|-- CarFactoryModel
    BuildingModel <|-- PowerPlantModel
    BuildingModel <|-- OatFieldModel
    BuildingModel <|-- HaulageFirmModel

    note "impacts = {\n +-sociability,\n +-ecology,\n +-economy\n} " as ImpactsNote
     BuildingModel - ImpactsNote
}


package Views {

    interface IBuildingView implements IMovable {
        + GetPosition() : int[]
        + ^{override} _Input(click : InputEvent)
    }

    abstract BuildingView implements IBuildingView, IBuildingObserver {
        + ^GetPosition() : int[]
        + ^{override} _Input(click : InputEvent)
    }

    class "<<static>>\nSceneManager" as SceneManager {
        + Initialize(root : Node, what : Node)
        + GoToScene(actualScene : Node, targetScene : Node)
    }

    class MapGenerator {
        + GenerateMap(int size) : TerritoryView
    }

    interface IUpdatable {
        + UpdateSelf()
    }

    abstract Gauge implements IUpdatable  {
        + ^{abstract} UpdateSelf()
    }

    class EconomyGauge {
        + ^UpdateSelf()
    }

    class EcologyGauge {
        + ^UpdateSelf()
    }

    class SociabilityGauge {
        + ^UpdateSelf()
    }

    class TerritoryView implements IUpdatable {
        + ^UpdateSelf()
    }

    interface IMovable{
        + GetPosition() : int[]
        + ^{override} _Input(click : InputEvent)
    }



    note "The map, the grid" as MapNote
    note "Coordinates for grid?" as CoordinatesNote
    note "Destroy the actual scene after load target!" as DestroySceneNote
    SceneManager - DestroySceneNote
    CoordinatesNote - IMovable
    MapNote - TerritoryView
    Gauge <|-- EconomyGauge
    Gauge <|-- EcologyGauge
    Gauge <|-- SociabilityGauge
    SceneManager <..up Gauge : < instantiate
    SceneManager <..up TerritoryView : < instantiate

    /' Some examples '/
    class BarView
    class CarFactoryView
    class PowerPlantView
    class OatFieldView
    class HaulageFirmView

    BuildingView <|-- BarView
    BuildingView <|-- CarFactoryView
    BuildingView <|-- PowerPlantView
    BuildingView <|-- OatFieldView
    BuildingView <|-- HaulageFirmView

}


package Controllers {
    class ImpactsController{
        + ApplyImpacts(gauge : Gauge, modifier : int)
    }

    class BuildingFactory{
            /' Some examples '/
            + CreateBar() : (model : IBuildingModel, view : BuildingView )
            + CreateCarFactory() : (model : IBuildingModel, view : BuildingView )
            + CreatePowerPlant() : (model : IBuildingModel, view : BuildingView )
            + CreateOatField() : (model : IBuildingModel, view : BuildingView )
            + CreateHaulageFirm() : (model : IBuildingModel, view : BuildingView )
        }
    IBuildingModel <..o BuildingFactory : < create
    IBuildingView <..o BuildingFactory : < create

    ImpactsController <.. TerritoryModel : > changes values
    ImpactsController <.. Gauge : > calls for update
}






}
@enduml
