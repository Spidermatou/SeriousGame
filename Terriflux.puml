@startuml Terriflux
!theme reddress-darkgreen

mainframe Terriflux

/' MAIN SCENE '/
class MainScene 
{
    + {override}  _Ready()
    + {override}  _Process()
}
MainScene *--> RawNode : - impacts
MainScene *--> RawNode : - grid
MainScene *--> RawNode : - inventory
MainScene ..> BuildingFactory : use  /' Via la PlacementList '/
MainScene ..> GridBuilder : use  
MainScene ..> IAlert : use  
MainScene ..> IPlaceMediator : use  

/' GENERAL '/
/' Any node of our own creation '/
abstract RawNode  /' extends Godot.Node2D '/
{
    # {readonly} PATH_NODES : String = "Nodes/"
    # {readonly} PATH_PROGRAMS : String = "Programs/"
    # {readonly} PATH_IMAGES : String = "Ressources/Images/"
    # RawNode() /' this.Name = this.getClass().ToString() '/ 
    + {override}  _Ready()
    + Verbose()
}

/' CELLS '/
interface ICell implements IPlaceMediator
{
    + GetDimensions() : VectorI 
    + IsSelected() : Boolean
    + Select()
    + Unselect() /' TODO - actuel ResetTexture '/
    + Notify(sender : IPlaceMediator)
}
abstract Cell extends RawNode implements ICell
{
    - {static} {readonly} DEFAULT_TEXTURE : Texture2D
    - {static} {readonly} SIZE : Vector2I 
    - {readonly} selfTexture : Texture2D
    # Cell()
    # ChangeSkin(texture : Texture2D)
    + {override}  _Ready() /' ChangeSkin() '/
    + {override} GetDimensions() : Integer[2] 
    + {override} IsSelected() : Boolean
    + {override} Select()
    + {override} Unselect() 
    + {override}  Verbose()
    + {override} Notify(sender : IPlaceMediator)
    - OnMouseAbove()
    - OnMouseOutside()
    - OnPressed()
}
class Grass extends Cell
{
    + Grass() 
}
abstract Building extends Cell
{
    - {readonly} impacts : Real[3]
    + Building(impacts : Real[3], needs : FlowKind[*], minimalProduction : FlowKind[*], texture : Texture2D, colorOfDot : Color)
    + GetImpacts() : Real[3]
    + GetNeeds() : FlowKind[*]
    + GetProduction() : FlowKind[*]     /' minimal product '/
    + GetNeedOf(flow : FlowKind) : Integer
    + GetProductOf(flow : FlowKind) : Integer        /' minimal product '/
    + GetMaluses() : Real[3]
    + GetHelp() : String        /' info for player about impacts, needs and products'/
    + {override} Verbose() : String
}
/' needs & minimalProduction = (FlowKind, Integer)[*] '/
Building" * " o--> " * "FlowKind : - {readonly} needs \n needs      
Building" * " o--> " * "FlowKind : - {readonly} minimalProduction \n products
enum FlowKind
{
    WATER
    ENERGY
    CEREALS
    BREAD
    COMPOSANT
    MACHINE
}
class Warehouse extends Building
{
    /' Recuperer tt les batiments dans sa zone d'effet '/
    + GetNeighbors() : Building[*] 
    + GetEffectZoneSize() : Integer 
    /' 
        foreach building dans sa zone d'effet :
            Supply()
            Stores() si a fourni assez de ressource precedement
    '/ 
    + UpdateStock() 
    + Supply(building : Building, flow : FlowKind, amount : Integer)
    + Stores(building : Building, flow : FlowKind, amount : Integer)
    /' Gestion des voisins '/
    + AddGetNeighbor(neighbor : Building)
    + RemoveGetNeighbor(neighbor : Building)    /' quand bat supprime de la map, on essaie de l'enlever dasn tt les entrpot '/
}
Warehouse" 1 " o--> " * "Building : - neighbors : supply and stores product of
class Field extends Building
{
    + Field()       
}
class Factory extends Building
{
    + Factory()    
}
class Bakery extends Building
{
    + Bakery()     
}
class EnergySupplier extends Building
{
    + EnergySupplier()      
}
class Shaft extends Building    
{
    + Shaft()
}
class Grocery extends Building
{
    + Grocery()         
}
class BuildingFactory
{
    + BuildingFactory()
    + CreateField()
    + CreateFactory()
    + CreateBakery()
    + CreateEnergySupplier() 
    + CreateShaft()
    + CreateGrocery()
}

/' ROUNDS '/
interface IRound
{
    + GetNumber() : Integer
    + Next()
}
class Round extends RawNode implements IRound
{
    + GetNumber() : Integer
    + Next()
}

/' GRID '/
interface IGrid
{
    + GetDimensions() : Vector2I
    + GetAll() : ICell[*]       /' (ICell, Vector2I)[*] '/
    + GetAt(coordinates : Vector2I) : ICell
    + SetAt(coordinates : Vector2I, cell : ICell)
    + DistanceBewteen(position1 : Integer[2], position2 : Integer[2]) : Integer
    + GetInactiveBuildings() : Building[*]        /' batiments qui ne peuvent produire '/
}
IGrid" * " *--> " * "ICell : - cells[*,*] 
interface IPlaceMediator
{
    + Notify(sender : IPlaceMediator)
}
/' gere uniquement le placement de cellule (et donc batiments) 
et les operations qui le precedent/suivent (choix du type, des coordonnees, etc) '/
class PlaceMediator  
{
    - maxPerTurn : Integer
    - buildedThisTurn : Integer
    - wantedCoordinates : Vector2I
    + {override} Notify(sender : IPlaceMediator)
    + GetMaxPlacementPerTurn() : Integer
    + GetPlacedThisTurn() : Integer
    - ReactOnPlacementList()
    - ReactOnGrid()
    - SetWantedCell(cell : ICell)
    - SetWantedCoordinates(coordinates : Vector2I)
    - NextTurn()
    /' 
        Confirm the placement - old StartPlacement() 
        Si c'est un bat : l'ajout à l'entrepot le plus proche s'il est dans sa zone
        Si c'est un entrepot : recherche des bats dans sa zone et ajout  
    '/
    - Place()  
}
PlaceMediator" * " o--> " 1 "ICell : - wantedModel 
PlaceMediator" * " o--> " 1 "IImpacts : - impacts 
PlaceMediator" * " o--> " 1 "IRound : - round 
class Grid extends RawNode implements IGrid, IPlaceMediator
{
    - dimensions : Vector2I
    + <<create>> Grid(dimensions : Vector2I)
    + {override} GetDimensions() : Vector2I
    + {override} GetAll() : ICell[*]       /' (ICell, Vector2I)[*] '/
    + {override} GetAt(coordinates : Vector2I) : ICell
    + {override} SetAt(coordinates : Vector2I, cell : ICell)
    + {override} DistanceBewteen(position1 : Integer[2], position2 : Integer[2]) : Integer
    + {override} GetInactiveBuildings() : Building[*]        /' batiments qui ne peuvent produire '/   
    + {override} GetInactiveAlert() : String
}
class GridBuilder
{
    /' Creer une grille remplie d'herbe / terrains constructibles (terrain par defaut du jeu) '/
    + Wasteland(size : Integer) : Grid
}
GridBuilder ..> Grid : create

/' INVENTORY & IMPACTS '/
interface IGauge implements IPlaceMediator
{
    + Increments(add : Real)
    + Get() : Real
    + Notify(sender : IPlaceMediator)
}
abstract Gauge implements IGauge
{
    # Gauge()
    + {override} Increments(add : Real)
    + {override} Get() : Real
    + {override} Notify(sender : IPlaceMediator)
}
class EcologyGauge extends Gauge
{
    + EcologyGauge()
}
class EconomyGauge extends Gauge
{
    + EconomyGauge()
}
class SociabilityGauge extends Gauge
{
    + SociabilityGauge()
}
interface IImpacts implements IPlaceMediator
{
    + IncrementsEcology(add : Real)
    + IncrementsEconomy(add : Real)
    + IncrementsSocial(add : Real)
    + GetEcology() : Real
    + GetEconomy() : Real
    + GetSociability() : Real
    + Notify(sender : IPlaceMediator)
}
IImpacts" 1 " *--> " 3 "IGauge : - gauges
interface IInventory 
{
    + Add(flow : FlowKind, amount : Integer)
    + Remove(flow : FlowKind, amount : Integer)
    + Contains(flow : FlowKind) : Boolean
    + GetQuantityOf(flow : FlowKind) : Integer
}
IInventory" * " ..> FlowKind : use
class Inventory extends RawNode implements IImpacts, IInventory /' ancien node Impact avec acces inventaire ET jauges, mais renommé '/
{   
    + {override} IncrementsEcology(add : Real)
    + {override} IncrementsEconomy(add : Real)
    + {override} IncrementsSocial(add : Real)
    + {override} GetEcology() : Real
    + {override} GetEconomy() : Real
    + {override} GetSociability() : Real
    + {override} Add(flow : FlowKind, amount : Integer)
    + {override} Remove(flow : FlowKind, amount : Integer)
    + {override} Contains(flow : FlowKind) : Boolean
    + {override} GetQuantityOf(flow : FlowKind) : Integer
    + {override} {override} Verbose() : String
    - ContainsEnough(flow : FlowKind, amount : Integer) : Boolean
}

/' MESSAGE to user '/
interface IAlert
{
    + Say(text : String)
    + Close()
}
class Alert implements IAlert
{
    + {override} Say(text : String)
    + {override} Close()
}

@enduml