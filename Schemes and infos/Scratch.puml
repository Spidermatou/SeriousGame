@startuml
!theme reddress-darkgreen

class Home{
    + _Ready()
}
Home *..> TerritoryView : use

interface IVerbosable{
    + Verbose()
}

class Paths{
    + {static} {readonly} GDEXT = ".tscn";
    + {static} {readonly} PNGEXT = ".png";
    + {static} {readonly} SVGEXT = ".svg";
    + {static} {readonly} RESSOURCES = "Ressources/";
    + {static} {readonly} NODES = "Nodes/";
    + {static} {readonly} IMAGES = RESSOURCES + "Images/";
    + {static} {readonly} VIEW_NODES = NODES + "View/";
    + {static} {readonly} MODEL_NODES = NODES + "Model/";
    + {static} {readonly} CONTROLLER_NODES = NODES + "Controller/";
    + {static} {readonly} DEFAULT_TEXTURE = IMAGES + "icon" + SVGEXT;
}

enum CellKind{
    BUILDING,
    WASTELAND,
    PRIMARY
}

class CellModel implements ICellObservable {
    - cname : string
    - size : int
    - placement : Vector2I
    + CellModel()
    + CellModel(x : int, y : int)
    + CellModel(observer : ICellObserver, x : int, y : int)
    + GetCellSize() : int
    + SetCellSize(newCellSize : int)
    + SetCellName(newName : string)
    + GetCellName() : string
    + SetCellKind(newKind : CellKind)
    + GetCellKind() : CellKind
    + SetPlacement(x : int, y : int)
    + GetPlacement() : Vector2I
    + SetObserver(observer : ICellObserver)
    + GetObserver() : ICellObserver
    + SetSkinExtension(extension : string)
    + GetSkinExtension() : string
    + NotifyPlacement()
    + NotifyCellName()
}
CellKind <.. CellModel : use\n-kind
ICellObserver <.. CellModel : use\n-observe

class Grid implements IGridObservable {
    - cells: CellModel[,]
    - size: int
    - observer: IGridObserver

    + Grid(size: int)
    + SetAt(cell: CellModel, line: int, column: int)
    + GetAt(line: int, column: int): CellModel
    + GetSize(): int
    + SetObserver(observer: IGridObserver)
    + Notify()
}

interface IGridObserver {
    + UpdateMap(grid: Grid)
}

interface ICellObservable {
    + SetObserver(observer: ICellObserver)
    + NotifyPlacement()
    + NotifyCellName()
}

interface ICellObserver {
    + UpdatePlacement(coordinates: Vector2I)
    + UpdateCellName(cname: string)
}

interface IGridObserver {
    + UpdateMap(grid: Grid)
}

interface IGridObservable {
    + SetObserver(observer: IGridObserver)
    + Notify()
}

class CellView implements ICellObserver, IVerbosable {
    - _nicknameLabel: Label
    - _skin: Sprite2D

    + _Ready() 
    + OnMouseOver() 
    + OnMouseExit() 
    + UpdatePlacement(coordinates: Vector2I) 
    + UpdateCellName(cname: string) 
    + ChangeSkin(skinName: string) 
    + {static} Create() : CellView
    + Verbose() : string
}

class TerritoryView implements IGridObserver {
    + _Ready() 
    + UpdateMap(grid: Grid)
    + {static} Create() : TerritoryView
}
TerritoryView ..> IGridObservable : > consult

class "<<static>> GridFactory" as GridFactory{
    + {static} CreatePrimaryLand(size : int)
    + {static} CreateNoMansLand(size : int)
}
Grid <..o GridFactory

class "<<static>> CellsFactory" as CellsFactory{
    + {static} CreatePrimaryCell(x : int, y : int) : CellModel
    + {static} DesignPrimaryCell(parent : Node, model : CellModel) : CellView
    + {static} CreateGrass(x : int, y : int) : CellModel
    + {static} DesignGrass(parent : Node, model : CellModel) : CellView
}
CellModel <..o CellsFactory
CellView <..o CellsFactory

abstract ABuildingModel implements IBuildingObservable{
    - observer : IBuildingObserver /' just one for each instance! '/
    # impacts : int[3]
    # needs : Flow[*]
    # product : Flow[*]
    + GetImpacts() : int[3]
    + GetFlowNeeds() : Flow[*]
    + GetFlowProducts() : Flow[*]
    + GetQuantityNeeds(kind : Flow) : int
    + GetQuantityProduced(kind : Flow) : int
    + SetObserver(observer : ICellObserver)
    + NotifyImpacts()
    /' impacts =
    +-sociability,
    +-ecology,
    +-economy\n}'/
}
note "needs and flows = {Flow:Quantity}" as FQNote
FQNote - ABuildingModel

interface IBuildingObserver{
    + UpdateImpacts()
}
interface IBuildingObservable{
    + NotifyImpacts()
}

@enduml
