    @startuml
!theme reddress-darkgreen

/' HOME / MASTER / START '/
class GameMaster{
    - GameMaster()
    + {override} _Ready()
}
GameMaster *..> "1"GridModel : > create and store\n - grid
GameMaster *..> "3"GaugeModel : > create and store\n - gauge
GameMaster *..> "1"GridView : > show
GameMaster *..> "3"GaugeView : > show

/' MODELS '/
class CellModel { /' TAG: Immutable '/
    - {static} {readonly} globalSize : Real
    - name : string
    + CellModel() 
    + CellModel(name : string, kind : CellKind)
    + GetName() : string
    + GetKind() : CellKind
    + GetGlobalSize() : Real
}

enum CellKind{
    BUILDING,
    WASTELAND,
    PRIMARY
}
CellKind ..> "1"CellModel : > define\n - kind

class GrassModel extends CellModel {
    + GrassModel()
}

class BuildingPart extends CellModel {
    + BuildingPart(buildingName : string)
}

enum Direction2D{
    HORIZONTAL,
    VERTICAL
}

class GridModel{
    - {readonly} size : int
    + GridModel(size : int)
    + GetSize() : int
    + ReplaceCellAt (cell : CellModel, line : int, column : int, update : bool = false)
    + GetCellAt (int line, int column) : Cell
     /' argument specifies the position of the first cell, the rest is calculated by the grid itself: '/
    + PlaceAt (placeable : IPlaceable, line : int, column : int, update : bool = false)
    + GetAt (int line, int column) : IPlaceable
    + GetAllPlacementsDirections() : Direction2D[*] /' (Vector2I, Direction2D)[*]
    + GetAllPlacements() : IPlaceable[*] /' (Vector2I, Direction2D)[*]
    + AddObserver(observer : IGridObserver)
    + RemoveObserver(observer : IGridObserver)
    + NotifyGridChanged() /' notify public: so you can request a forced update '/
}
GridModel *..> "*"CellModel : > stores\n- cells
GridModel ..> "*"IGridObserver : > notifies\n - observers
GridModel *..> "*"IPlaceable : > places\n- placeables   /' (Vector2I, IPlaceable)[*] '/
GridModel <.. "*"Direction2D : > know\n- directions   /' (Vector2I, Direction2D)[*] '/

interface IGridObserver{
    + UpdateMap(grid : GridModel)
}

interface IPlaceable{
    + GetComposition() : CellModel[*]
}

class BuildingModel implements IPlaceable { /' TAG: Immutable '/
    - {readonly} name : string
    - {readonly} impacts : Real[3]
    + BuildingModel(name : string, influance : InfluenceScale, impacts : Real[3],\n\tneeds : FlowKind[*], production : FlowKind[*],\n\tparts : BuildingPart[*])
    + {static} CreateFromName(name : string, influance : InfluenceScale) : BuildingModel
    /' MULTIPLICATION_RATE : (InfluenceScale, int)[*] '/
    /' - needs : (FlowKind, int)[*] '/
    /' - production : (FlowKind, int)[*] '/
    + GetName() : string
    + GetInfluence() : InfluenceScale
    + GetImpacts() : Real[3]
    + GetPartsNumber() : int
    + GetNeedsKinds() : FlowKind[]
    + GetProductionsKinds() : FlowKind[]
    + GetQuantityNeeded(flow : FlowKind) : int
    + GetQuantityProducted(flow : FlowKind) : int
    + ^GetComposition() : CellModel[*]
}
BuildingModel <.. "1"InfluenceScale : < amplifies needs\n and production\n - influence
BuildingModel <.. "3"InfluenceScale : < modifies\n - {static}{readonly} MULTIPLICATION_RATE
BuildingModel <.. "*"FlowKind : < need\n{readonly} - needs
BuildingModel <.. "*"FlowKind : < produces\n{readonly} - production
BuildingModel *..> "*"BuildingPart : < is composed of\n{readonly} - parts


enum FlowKind{
    Electricity,
    Raw_materials,
    Water,
    Cereals
}

enum InfluenceScale{
    REGIONAL,
    NATIONAL,
    WORLDWIDE
}

abstract GaugeModel
GaugeModel ..> GaugeView : > notifies\n - observers

/' VUES '/
class CellView {
    - displayName : string
    - CellView()
    - CellView(displayName : string) 
    + {override} _Ready()
    + {static} Design() : CellView
    + SetSkin(Texture2D skin)
    + UpdateName(name : string)
    /' events '/ 
    - OnMouseOver()
    - OnMouseExit()
}

class GrassView extends CellView {
    - GrassView()
    + {static} {override} Design() : CellView
    + {override} _Ready()
}

class GridView implements IGridObserver {
    - GridView()
    + {static} Design()
    + {override} _Ready()
    + ^UpdateMap(gridStructur : cells[*])
}
GridView *..> "*"CellView : > manage and show
GridView *..> "*"BuildingView : > manage and show

/' OBSERVERS '/
class BuildingView {
    - BuildingModel()
    + {static} Design() : CellView
    + {override} _Ready() /' set children skin here '/
}


/' possibly add the DataManager '/
@enduml
